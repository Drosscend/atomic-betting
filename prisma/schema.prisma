generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?        @map("email_verified")
  image           String?
  accounts        Account[]
  sessions        Session[]
  teamMemberships TeamMembership[]
  createdTeams    Team[]           @relation("TeamCreator")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Team {
  id              String           @id @default(uuid())
  name            String
  defaultCoins    Int              @default(300)
  defaultHoursBet Int              @default(1)
  creatorId       String
  creator         User             @relation("TeamCreator", fields: [creatorId], references: [id])
  memberships     TeamMembership[]
  bets            Bet[]

  @@map("teams")
}

model TeamMembership {
  id              String           @id @default(cuid())
  userId          String
  teamId          String
  status          MembershipStatus
  role            MembershipRole   @default(MEMBER)
  coins           Int              @default(0)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  team            Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  betTransactions BetTransaction[]

  @@unique([userId, teamId])
  @@map("team_memberships")
}

model Bet {
  id            String           @id @default(uuid())
  type          BetType
  startDateTime DateTime
  endDateTime   DateTime
  minCoins      Int
  maxCoins      Int
  description   String
  teamId        String
  team          Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  transactions  BetTransaction[]
  questionBet   QuestionBet?

  @@map("bets")
}

model BetTransaction {
  id               String          @id @default(uuid())
  betId            String
  bet              Bet             @relation(fields: [betId], references: [id], onDelete: Cascade)
  teamMembershipId String
  teamMembership   TeamMembership  @relation(fields: [teamMembershipId], references: [id], onDelete: Cascade)
  coinsAmount      Int
  transactionDate  DateTime        @default(now())
  odds             Float?
  betOptionId      String
  betOption        BetOption       @relation(fields: [betOptionId], references: [id], onDelete: Cascade)
  transactionType  TransactionType @default(BET)

  @@map("bet_transactions")
}

model QuestionBet {
  id              String      @id @default(uuid())
  betId           String      @unique
  bet             Bet         @relation(fields: [betId], references: [id], onDelete: Cascade)
  question        String
  options         BetOption[]
  correctOption   BetOption?  @relation("CorrectOption", fields: [correctOptionId], references: [id])
  correctOptionId String?

  @@map("question_bets")
}

model BetOption {
  id             String           @id @default(uuid())
  questionBetId  String
  questionBet    QuestionBet      @relation(fields: [questionBetId], references: [id], onDelete: Cascade)
  content        String
  correctForBets QuestionBet[]    @relation("CorrectOption")
  transactions   BetTransaction[]

  @@map("bet_options")
}

enum BetType {
  QUESTION
  // D'autres types de paris peuvent être ajoutés ici à l'avenir
}

enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MembershipRole {
  MEMBER
  MANAGER
  ADMIN
}

enum TransactionType {
  BET
  WINNINGS
}
